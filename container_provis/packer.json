{
  "variables": {
    "vbox_ssh_pass"     : null,
    "packer_output"     : null,
    "aws_access_key"    : "",
    "aws_secret_key"    : "",
    "hostname"          : "appliance",
    "mldb_docker_tag"   : "latest",
    "mldb_docker_image" : "quay.io/mldb/mldb",
    "base_ovf" : "packer_output/vbox-mldb-base/vbox-MLDB-base.ova"
  },
  "builders": [
    {
      "name":          "aws",
      "type":          "amazon-ebs",
      "vpc_id":        "vpc-fd2d4f9a",
      "subnet_id":     "subnet-95c5c3cd",
      "associate_public_ip_address": true,
      "access_key":    "{{user `aws_access_key`}}",
      "secret_key":    "{{user `aws_secret_key`}}",
      "region":        "us-east-1",
      "availability_zone": "us-east-1d",
      "source_ami":    "ami-d05e75b8",
      "instance_type": "c3.large",
      "ssh_username":  "ubuntu",
      "ami_name":      "MLDB-{{isotime \"20060102\"}}",
      "ami_description": "Datacratic MLDB - the machine learning database. Updated on {{isotime \"2006-01-02\"}}",
      "run_tags":      { "Name": "MLDB-{{isotime \"20060102\"}}", "billcode": "mldb-prod" },
      "tags":          { "Name": "MLDB-{{isotime \"20060102\"}}", "billcode": "mldb-prod" }
    },
    {
      "name": "vbox",
      "type": "virtualbox-ovf",
      "headless" : true,
      "source_path": "{{user `base_ovf`}}",
      "boot_wait": "10s",
      "ssh_username": "ubuntu",
      "ssh_password": "{{user `vbox_ssh_pass`}}",
      "ssh_wait_timeout": "60s",
      "shutdown_command": "echo '{{user `vbox_ssh_pass`}}' | sudo -S shutdown -P now",
      "guest_additions_mode": "disable",
      "vm_name": "MLDB-{{isotime \"20060102\"}}",
      "format": "ova",
      "output_directory": "{{user `packer_output`}}/mldb/MLDB-{{isotime \"20060102\"}}-{{user `mldb_docker_tag`}}",
      "vboxmanage": [
        ["modifyvm", "{{.Name}}", "--memory", "2048"],
        ["modifyvm", "{{.Name}}", "--cpus", "1"],
        ["modifyvm", "{{.Name}}", "--nic1", "nat"],
        ["modifyvm", "{{.Name}}", "--natpf1", "guestssh,tcp,127.0.0.1,2222,,22"],
        ["modifyvm", "{{.Name}}", "--natpf1", "guestmldb,tcp,127.0.0.1,8080,,80"],
        ["modifyvm", "{{.Name}}", "--mouse", "usbtablet"]
      ],
      "export_opts": [
        "--manifest",
        "--vsys",           "0",
        "--product",        "MLDB",
        "--producturl",     "http://mldb.ai",
        "--vendor",         "mldb.ai inc.",
        "--vendorurl",      "http://datacratic.com"
      ]
    }
  ],
  "provisioners": [
    {
      "type":        "file",
      "source":      "files/etc.issue",
      "destination": "/tmp/etc.issue"
    },
    {
      "type": "shell",
      "execute_command": "echo '{{user `vbox_ssh_pass`}}' | {{ .Vars }} sudo -E -S sh '{{ .Path }}'",
      "inline": [
          "echo '%sudo    ALL=(ALL)  NOPASSWD:ALL' >> /etc/sudoers"
         ],
      "only": ["vbox"]
    },
    {
      "type": "shell",
      "inline": [
          "sleep 5",
          "sudo apt-get update",
          "sudo apt-get install -y linux-image-generic-lts-trusty wget",
          "sudo install -d -o ubuntu -g ubuntu /mldb_data",
          "echo 'Installing docker...'",
          "sudo sh -c 'wget -qO- https://get.docker.com/ | sh'",
          "echo 'Docker installation complete'",
          "sudo usermod -aG docker ubuntu",
          "sudo sh -c 'echo {{user `hostname`}} >/etc/hostname'",
          "sudo sed -i 's/^127\\.0\\.1\\.1.*/127.0.1.1  {{user `hostname`}}/' /etc/hosts",
          "sudo mv /tmp/etc.issue          /etc/issue",
          "sudo sh -c 'echo \"GRUB_TIMEOUT=0\n\" >> /etc/default/grub'",
          "sudo update-grub",
          "sudo docker pull {{user `mldb_docker_image`}}:{{user `mldb_docker_tag`}}"
        ]
    },
    {
      "type": "shell",
      "inline": [
          "sudo sed -i 's/splash//g' /etc/default/grub",
          "sudo update-grub",
          "sudo /bin/bash -c 'echo \"blacklist i2c_piix4\" >> /etc/modprobe.d/blacklist.conf'",
          "sudo update-initramfs -u -k all"
        ],
      "only": ["vbox"]
    },
    {
      "type": "shell",
      "inline": [ "cat >/tmp/mldb.init <<EOF",
                  "# On the first boot, this will pull the latest mldb Container",
		  "# subsequent executions will keep running the same (pulled) version",
		  "description \"MLDB Container\"",
		  "author \"mldb.ai inc.\"",
		  "start on filesystem and started docker",
		  "stop on runlevel [!2345]",
		  "respawn",
		  "script",
		  "    /usr/bin/docker run -a stdin -a stdout -a stderr -v /mldb_data:/mldb_data -e MLDB_IDS=\"`id ubuntu`\" -p 80:80 {{user `mldb_docker_image`}}:{{user `mldb_docker_tag`}}",
		  "end script",
		  "EOF",
		  "sudo mv /tmp/mldb.init /etc/init/mldb.conf"
		],
      "only": ["vbox"]
    },
    {
      "type": "shell",
      "inline": [ "cat >/tmp/mldb.init <<EOF",
                  "# On the first boot, this will pull the latest mldb Container",
		  "# subsequent executions will keep running the same (pulled) version",
		  "description \"MLDB Container\"",
		  "author \"mldb.ai inc.\"",
		  "start on filesystem and started docker",
		  "stop on runlevel [!2345]",
		  "respawn",
		  "script",
		  "    /usr/bin/docker run -a stdin -a stdout -a stderr -v /mldb_data:/mldb_data -e MLDB_IDS=\"`id ubuntu`\" -p 127.0.0.1:80:80 {{user `mldb_docker_image`}}:{{user `mldb_docker_tag`}}",
		  "end script",
		  "EOF",
		  "sudo mv /tmp/mldb.init /etc/init/mldb.conf"
		],
      "only":        ["aws"]
    },
		   
    {
      "type": "shell-local",
      "command": "echo '**** For the AMI you will need to retrieve its AMI_ID on AWS and use this command to propagate it to other regions: distami -p -v --region us-east-1 AMI_ID'",
      "only": ["aws"]
    },
    {
      "type": "shell-local",
      "command": "echo s3cmd put {{user `packer_output`}}/mldb/MLDB-{{isotime \"20060102\"}}.ova s3://public-mldb-ai/",
      "only": ["vbox"]
    },
    {
      "type": "shell-local",
      "command": "echo s3cmd setacl --acl-public s3://public-mldb-ai/MLDB-{{isotime \"20060102\"}}.ova",
      "only": ["vbox"]
    }
  ]
}
